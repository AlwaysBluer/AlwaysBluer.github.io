<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Next主题定制优化</title>
    <url>/2024/01/20/Next%E4%B8%BB%E9%A2%98%E5%AE%9A%E5%88%B6%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>博客内容主要参考 <a href="https://choubin.site/2019/12/30/CustomBlogTheme/">Next主题定制优化</a></p>
<h1 id="站点优化"><a href="#站点优化" class="headerlink" title="站点优化"></a>站点优化</h1><h2 id="生成标签、分类、归档页面"><a href="#生成标签、分类、归档页面" class="headerlink" title="生成标签、分类、归档页面"></a>生成标签、分类、归档页面</h2><p>主题首页的默认页面中是没有标签、分类、归档页面的，需要手动生成一下。先在博客根目录下打开<code>git-bash</code>或终端，然后键入以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page tags &amp;&amp; hexo new page categories &amp;&amp; hexo new page archives</span><br></pre></td></tr></table></figure>

<p>然后打开新增的<code>source/tags/index.md</code>，修改如下</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">  title: 标签</span><br><span class="line">  date: 2018-10-19 22:57:00</span><br><span class="line"><span class="bullet">+</span> type: tags</span><br></pre></td></tr></table></figure>

<p>同理再修改另外两个新增文件夹下的<code>index.md</code>。</p>
<p>最后修改主题配置文件的<code>menu</code>字段</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/ || user</span><br><span class="line"><span class="bullet">+</span> tags: /tags/ || tags</span><br><span class="line"><span class="bullet">+</span> categories: /categories/ || th</span><br><span class="line"><span class="bullet">+</span> archives: /archives/ || archive</span><br></pre></td></tr></table></figure>

<h2 id="文章摘要显示"><a href="#文章摘要显示" class="headerlink" title="文章摘要显示"></a>文章摘要显示</h2><p>默认的主题配置里，首页会显示每一篇文章的全文，如果想只显示文章摘要，对主题配置文件做如下更改</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">excerpt<span class="emphasis">_description: true</span></span><br></pre></td></tr></table></figure>

<p>用户可以在文章中通过<code>&lt;!-- more --&gt;</code>标记来精确划分摘要信息，标记之前的段落将作为摘要显示在首页。</p>
<p>如果在文章的 Front-Matter 中有非空的 <code>description</code> 字段，则该字段的内容会被作为摘要显示在首页。</p>
<h2 id="修改网站-Favicon"><a href="#修改网站-Favicon" class="headerlink" title="修改网站 Favicon"></a>修改网站 Favicon</h2><p>Favicon 即浏览器标签左侧的图标。下载自己喜欢的图标置于 <code>themes\next\source\images\</code> 目录下，命名方式参考主题配置文件中的 <code>favicon</code> 字段。 这里介绍一个<a href="https://tool.lu/favicon/">在线制作 <code>favicon</code>的网站</a>，可以上传喜欢的图片制作成<code>favicon</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">small: /images/favicon-16x16-next.png  # 小图标</span><br><span class="line">medium: /images/favicon-32x32-next.png  # 大图标</span><br><span class="line">apple_touch_icon: /images/apple-touch-icon-next.png  # 苹果图标</span><br><span class="line">safari_pinned_tab: /images/logo.svg  # safari浏览器标签页图标</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h2 id="添加版权协议"><a href="#添加版权协议" class="headerlink" title="添加版权协议"></a>添加版权协议</h2><p>在主题配置文件中开启相关字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">creative_commons: by-nc-sa</span><br></pre></td></tr></table></figure>

<h1 id="主题优化"><a href="#主题优化" class="headerlink" title="主题优化"></a>主题优化</h1><h2 id="取消文章目录的数字编号"><a href="#取消文章目录的数字编号" class="headerlink" title="取消文章目录的数字编号"></a>取消文章目录的数字编号</h2><p>主题配置文件中修改</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">toc:</span><br><span class="line">  number: false  # 关闭目录中的数字编号</span><br></pre></td></tr></table></figure>



<h2 id="修改文章-meta-信息"><a href="#修改文章-meta-信息" class="headerlink" title="修改文章 meta 信息"></a>修改文章 meta 信息</h2><p>默认主题下， 标题下方会显示文章的创建时间、文章的修改时间、文章分类信息等元数据，用户可以在主题配置文件中自定义设置需要显示的 meta 元信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post_meta:</span><br><span class="line">  item_text: true  # 显示文字说明</span><br><span class="line">  created_at: true  # 显示文章创建时间</span><br><span class="line">  updated_at:</span><br><span class="line">    enabled: false  # 隐藏文章修改时间</span><br><span class="line">    another_day: true  # 只有当修改时间和创建时间不是同一天的时候才显示</span><br><span class="line">  categories: false  # 隐藏分类信息</span><br></pre></td></tr></table></figure>

<h2 id="页面加载进度条"><a href="#页面加载进度条" class="headerlink" title="页面加载进度条"></a>页面加载进度条</h2><p>当网络不好的时候可能会在打开站点或跳转文章时出现短暂的白屏，此时如果能有加载进度提示将会提高用户操作体验。</p>
<p>在NexT根目录下执行以下命令安装相关依赖：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone https://github.com/theme-next/theme-next-pace themes/next/source/lib/pace</span><br></pre></td></tr></table></figure>

<p>在主题配置文件中设置 <code>pace: true</code>。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Configuration</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建个人博客</title>
    <url>/2024/01/19/Build-Blog-Site-with-Hexo/</url>
    <content><![CDATA[<h1 id="什么是hexo"><a href="#什么是hexo" class="headerlink" title="什么是hexo"></a><strong>什么是hexo</strong></h1><blockquote>
<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
</blockquote>
<p>简单来说，hexo是一个规范化的博客框架，应用hexo，博客作者只需要编写博客内容，并可以自由选择UI风格。部署好站点配置文件后，可通过几行简单命令轻松将内容更新到个人网站或者github上。</p>
<h1 id="hexo的常用命令"><a href="#hexo的常用命令" class="headerlink" title="hexo的常用命令"></a>hexo的常用命令</h1><h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init [folder]																						</span><br></pre></td></tr></table></figure>
<p>本命令相当于执行了以下几步，创建了博客网站的项目文件：</p>
<ol>
<li>Git clone hexo-starter 和 hexo-theme-landscape 主题到当前目录或指定目录。</li>
<li>使用 Yarn 1、pnpm 或 npm 包管理器下载依赖（如有已安装多个，则列在前面的优先）。npm 默认随 Node.js 安装。</li>
</ol>
<p>当执行成功后，进入 [folder]，会得到指定文件夹的目录如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── <span class="built_in">source</span></span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes	</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>_config.yml</code>为站点配置文件，与之区分的是主题配置文件，详见后文； source目录下是本地编写的博客文件，默认为markdown格式；</p>
</li>
<li><p><code>scaffolds</code>是模板文件所在目录，可通过指定使用的模板创建对应的博客，博客文件和模板中内容一致，因此可以当有较多重复内容时，编写模板，创建时指定即可；一开始保存有<code>page</code> 、<code>draft</code>、 <code>post</code>三种基本模板；</p>
</li>
<li><p><code>source</code>  博客作者编写的文件所在目录；</p>
</li>
<li><p><code>themes</code> 博客主题所在目录，通过github下载的themes主题保存在此，通过选择不同主题即可选择不同的ui界面</p>
</li>
<li><p><code>node_modules</code> npm局部下载时，创建的目录，在项目根路径下使用npm下载的包均在此目录下</p>
</li>
<li><p><code>public</code> hexo根据source内容，站点配置文件，主题配置生成的网站文件，也是最终推送部署到github page上的目录</p>
</li>
</ul>
<h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>本命令用于创建页面，文章，草稿，<code>title</code>为创建的文件名称，后缀默认为md即markdown格式</p>
<p><code>layout</code>为Hexo默认的布局格式，或者说文章类型</p>
<table>
<thead>
<tr>
<th align="center">layout</th>
<th align="center">路径</th>
<th align="center">效果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">page</td>
<td align="center">source&#x2F;</td>
<td align="center">创建新的网页页面，例如创建tags和categories时会在source&#x2F;下创建对应文件夹和index.html</td>
</tr>
<tr>
<td align="center">draft</td>
<td align="center">source&#x2F;_drafts</td>
<td align="center">创建草稿，通过<code>hexo publish [layout] &lt;title&gt;</code>发布为post</td>
</tr>
<tr>
<td align="center">post</td>
<td align="center">source&#x2F;_posts</td>
<td align="center">创建一般博客页面，默认选项</td>
</tr>
<tr>
<td align="center">scaffold_type</td>
<td align="center">source&#x2F;</td>
<td align="center">根据自定义模板创建博客</td>
</tr>
</tbody></table>
<p>其他参数</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>-p</code>, <code>--path</code></td>
<td>自定义新文章的路径</td>
</tr>
<tr>
<td><code>-r</code>, <code>--replace</code></td>
<td>如果存在同名文章，将其替换</td>
</tr>
<tr>
<td><code>-s</code>, <code>--slug</code></td>
<td>文章的 Slug，作为新文章的文件名和发布后的 URL</td>
</tr>
</tbody></table>
<h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ hexo g		</span><br></pre></td></tr></table></figure>

<p>该命令用于hexo生成静态文件即public目录下的内容</p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>d</code>, <code>--deploy</code></td>
<td align="left">文件生成后立即部署网站</td>
</tr>
<tr>
<td align="left"><code>-w</code>, <code>--watch</code></td>
<td align="left">监视文件变动</td>
</tr>
<tr>
<td align="left"><code>-b</code>, <code>--bail</code></td>
<td align="left">生成过程中如果发生任何未处理的异常则抛出异常</td>
</tr>
<tr>
<td align="left"><code>-f</code>, <code>--force</code></td>
<td align="left">强制重新生成文件 ，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 <br />使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td>
</tr>
</tbody></table>
<h2 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>
<p>发表草稿。</p>
<h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ hexo s		</span><br></pre></td></tr></table></figure>
<p>启动本地服务器。默认情况下，访问网址为： <a href="http://localhost:4000/%E3%80%82">http://localhost:4000/。</a></p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-p</code>, <code>--port</code></td>
<td align="left">重设端口</td>
</tr>
<tr>
<td align="left"><code>-s</code>, <code>--static</code></td>
<td align="left">只使用静态文件</td>
</tr>
<tr>
<td align="left"><code>-l</code>, <code>--log</code></td>
<td align="left">启动日记记录，使用覆盖记录格式</td>
</tr>
</tbody></table>
<h2 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ hexo d    </span><br></pre></td></tr></table></figure>

<p>部署网站到目标仓库</p>
<h2 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>

<p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>
<p>在某些情况（尤其是更换主题后），如果发现对站点的更改无论如何也不生效，需要运行该命令。</p>
<h2 id="其他选项"><a href="#其他选项" class="headerlink" title="其他选项"></a>其他选项</h2><p><strong>安全模式</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo --safe</span><br></pre></td></tr></table></figure>

<p>在安全模式下，不会加载插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p>
<p><strong>调试模式</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo --debug</span><br></pre></td></tr></table></figure>

<p>在终端中显示调试信息并记录到 <code>debug.log</code></p>
<p><strong>简洁模式</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo --silent</span><br></pre></td></tr></table></figure>

<p>隐藏终端信息。</p>
<h1 id="站点部署与配置"><a href="#站点部署与配置" class="headerlink" title="站点部署与配置"></a>站点部署与配置</h1><h2 id="prerequisite："><a href="#prerequisite：" class="headerlink" title="prerequisite："></a>prerequisite：</h2><ul>
<li>github 创建和账户同名的仓库，仓库名必须为<code>&lt;username&gt;.github.io</code>，必须为public</li>
<li>安装好Node.js</li>
<li>安装好Git</li>
</ul>
<p><a href="https://blog.csdn.net/Small_Yogurt/article/details/104968169">Node.js安装教程</a></p>
<h2 id="hexo使用流程"><a href="#hexo使用流程" class="headerlink" title="hexo使用流程"></a>hexo使用流程</h2><p>npm安装hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$  npm install -g hexo-cli </span><br></pre></td></tr></table></figure>

<p>hexo初始化目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$  hexo init blog</span><br></pre></td></tr></table></figure>

<p>发布测试文章并访问<a href="http://localhost:4000/%E6%9F%A5%E7%9C%8B%E7%BD%91%E7%AB%99%E6%95%88%E6%9E%9C">http://localhost:4000/查看网站效果</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$  hexo new test_my_site</span><br><span class="line">$  hexo g</span><br><span class="line">$  hexo s</span><br></pre></td></tr></table></figure>

<p>编辑根目录下站点配置文件<code>_config.yml</code>，翻到最后修改为刚才创建的仓库地址</p>
<p><img src="https://pic1.zhimg.com/80/v2-279ac5149b577f04dc099defbb12eaa8_720w.webp" alt="pic1"></p>
<p>安装Git部署插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>安装成功后输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>这三条命令将刚才测试生成的静态文件删除，并生成新的文件，部署到github仓库页面，这时可以通过访问 <code>username.github.io</code>访问博客主页，部署后要等几分钟才会生效。</p>
<h1 id="NEXT主题配置"><a href="#NEXT主题配置" class="headerlink" title="NEXT主题配置"></a>NEXT主题配置</h1><ul>
<li>在终端窗口下，定位到 Hexo 站点目录下。使用 <code>Git</code> checkout 代码：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> your-hexo-site</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>or</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-theme-next</span><br></pre></td></tr></table></figure>



<ul>
<li>当 克隆&#x2F;下载 完成后，打开 <strong>站点配置文件</strong>， 找到 <code>theme</code> 字段，并将其值更改为 <code>next</code>以启用 NexT 主题</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<ul>
<li>Next以及其他主题的配置都需要到配置目录下的<code>_config.yml</code>修改，或者可以通过在站点根目录下创建<code> _config.[theme_name].yml</code>，并将原<code>_config.yml</code>内容拷贝进该文件，使得hexo优先使用该配置文件内容，例如，使用npm下载的next配置文件拷贝到根目录下的_config.next.yml</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /node_modules/hexo-theme-next/_config.yml _config.next.yml</span><br></pre></td></tr></table></figure>

<ul>
<li>需要将next配置文件中语言设置更改为<code>zh-CN</code>使得hexo能读取menu翻译文本</li>
</ul>
<p>其他更详细的第三方设置可参考 <a href="https://theme-next.iissnan.com/getting-started.html">Next中文文档</a></p>
<h1 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h1><p>当博文中有图片时，若是少量图片，可以直接把图片存放在source文件夹中，但这显然不合理的，因为图片会占据大量的存储的空间，加载的时候相对缓慢 ，这时考虑把博文里的图片上传到某一网站，然后获得外部链接，使用Markdown语法，完成图片的插入，这种网站就被成为图床。</p>
<p>阿里云是目前中国最大的云服务提供商，其提供的OSS服务可以满足我们的需求。</p>
<p>PicGo能快速上传图片并获取图片URL，结合Typora图像设置可以使得本地图片插入到文档后立刻上传并保存到OSS bucket中</p>
<p>PicGo中，我们需要设置KeyId, KeySecret，Bucket等信息，这些都是在阿里云获得</p>
<p><img src="https://alwaysbluer-picture-bed.oss-cn-shenzhen.aliyuncs.com/img/image-20240120005232538.png" alt="image-20240120005232538"></p>
<h2 id="OSS-bucket创建"><a href="#OSS-bucket创建" class="headerlink" title="OSS bucket创建"></a>OSS bucket创建</h2><p>在注册好阿里云账号后，打开侧边栏，选择对象存储OSS，如下图：</p>
<p><img src="https://pic4.zhimg.com/80/v2-ef5d5dad46a425e56d3962b59c21789f_720w.webp" alt="img"></p>
<p>点击创建bucket，编辑配置，如图，读写权限改成公共读，其余默认，计费方式默认是按量计费，适合访问量不大的个人播客主页使用</p>
<p><img src="https://pic1.zhimg.com/80/v2-c14c4bd3fac73482baf17ea0ef76fa3c_720w.webp" alt="img"></p>
<h2 id="用户权限管理"><a href="#用户权限管理" class="headerlink" title="用户权限管理"></a>用户权限管理</h2><p>添加用户，推荐最好是单独创建一个用户来单独操作OSS（用户的定义就是需要访问云资源的人员或应用程序），这样给这个用户赋予单独的访问 OSS的权限，更加安全方便。</p>
<p>添加用户步骤为：点击自己头像，然后选择访问控制，如下图所示：</p>
<p><img src="https://pic2.zhimg.com/80/v2-9ccc8cf6cf89bb8b576072b628af1df5_720w.webp" alt="img"></p>
<p>点击用户，选择新建用户，如下图所示</p>
<p><img src="https://pic2.zhimg.com/80/v2-5b89c296409eb60471e78d35ef0cb521_720w.webp" alt="img"></p>
<p>之后进行用户配置，注意要勾选编程访问，控制台密码登录可以不选择，登录名称，显示名称自己设定。</p>
<p>确定后得到创建用户的信息，这里要记下AccessKey ID 和 AccessKeySecret，之后配置PICGO用到，因为这个界面关掉之后就不好找了，所以最好 记在记事本里，如下图所示：</p>
<p><img src="https://pic4.zhimg.com/80/v2-eaffad6786361f0bd708e81d053bacc7_720w.webp" alt="img"></p>
<p>设置用户权限，使得用户只能访问OSS的服务。点击添加权限，如下图所示：</p>
<p><img src="https://pic2.zhimg.com/80/v2-5fdbd5cad58546b004bb68586aa67e11_720w.webp" alt="img"></p>
<p>选择管理对象存储服务权限，点击确定，如下图所示：</p>
<p><img src="https://pic2.zhimg.com/80/v2-258655e47718594fd0c5c72083dfa2a5_720w.webp" alt="img"></p>
<p>上述过程完成后，将信息填入PicGo的设置中，即可启用阿里云OSS服务，可以上传几张图片验证效果</p>
<h2 id="Typora配置PicGo"><a href="#Typora配置PicGo" class="headerlink" title="Typora配置PicGo"></a>Typora配置PicGo</h2><p>启动Typora，菜单栏中，点击 文件-&gt;偏好设置-&gt;图像，设置为如下</p>
<p><img src="https://alwaysbluer-picture-bed.oss-cn-shenzhen.aliyuncs.com/img/image-20240120010528310.png" alt="image-20240120010528310"></p>
<p>这样博客编辑时，选择上传图像，URL会自动转化成OSS的URL。</p>
<hr>
<p>参考链接：</p>
<p><a href="https://hexo.io/zh-cn/docs/setup">hexo中文文档</a></p>
<p><a href="https://theme-next.iissnan.com/getting-started.html">NexT中文文档</a></p>
<p><a href="https://juejin.cn/post/7154719695261106189">Hexo图床搭建</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/104152479">阿里云 PicGo图床配置教程</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Configuration</tag>
        <tag>pictures bed</tag>
      </tags>
  </entry>
</search>
